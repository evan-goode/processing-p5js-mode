0012 (1.3.2)
X change 'authorList' to 'authors' (that changed in, uh, 3.0a11)
X update p5.js to 1.4.0 instead of 1.2.0

_ need to sort out the deleteFile() weirdness in JNA


_ still a lot of temp files left around?
_   instead of doing temp files, should that be state stored by the server?
_     i.e. if there's a 'temp' version of a particular file, use that when it's requested
_     for that matter, maybe just send the contents of the editor tabs when requested?
_   write the temp stuff to another folder?
_   positive part of temp files: not having to save between runs
_   save the temp stuff to a different folder entirely?
_ when using p5jsMode, just require that sketches are saved
_   too many problems with unsaved code not working properly
_   (instead of doing the weird tricks with temp files)

_ Warning: Nashorn engine is planned to be removed from a future JDK release
_   https://github.com/fathominfo/processing-p5js-mode/issues/27
o   what a f*king mess: https://medium.com/graalvm/d4da3605b6cb
o     scroll to "How to run GraalVM JavaScript on a stock JDK"
o     decompose this maven-fest https://github.com/graalvm/graal-js-jdk11-maven-demo
o     into the necessary collection of jars, and try to move from there
X   seems to be possible to follow our use case: a Java-only engine,
X     though everything seems to push in the direction of native code or the full VM
_   how to suppress the warning
_     https://bugs.openjdk.java.net/browse/JDK-8210140
_     pass "--no-deprecation-warning" as a Nashorn startup arg
_     or on JVM startup: -Dnashorn.args="--no-deprecation-warning"
_   https://www.graalvm.org/downloads/
_   ok, less of a mess:
_     simpler tutorial: https://golb.hplar.ch/2020/04/java-javascript-engine.html
_     list of jars needed: https://www.graalvm.org/reference-manual/js/RunOnJDK/#graalvm-javascript-without-maven---jar-files-from-graalvm
_   using a Linux download just in case any native libs are in there
_     https://github.com/graalvm/graalvm-ce-builds/releases/tag/vm-21.2.0

$GRAALVM/jre/languages/js/graaljs.jar - core component of GraalVM JavaScript
https://repo.maven.apache.org/maven2/org/graalvm/js/js/20.3.0/js-20.3.0.jar

$GRAALVM/jre/languages/js/icu4j.jar - ICU4J component for internationalization
https://repo.maven.apache.org/maven2/com/ibm/icu/icu4j/67.1/icu4j-67.1.jar

$GRAALVM/jre/languages/regex/tregex.jar - GraalVM’s regular expression engine
https://repo.maven.apache.org/maven2/org/graalvm/regex/regex/20.3.0/regex-20.3.0.jar

$GRAALVM/jre/lib/boot/graal-sdk.jar - GraalVM’s SDK to implement languages
https://repo.maven.apache.org/maven2/org/graalvm/sdk/graal-sdk/20.3.0/graal-sdk-20.3.0.jar

$GRAALVM/jre/lib/truffle/truffle-api.jar - GraalVM’s Language API, to implement interpreters
https://repo.maven.apache.org/maven2/org/graalvm/truffle/truffle-api/20.3.0/truffle-api-20.3.0.jar

$GRAALVM/jre/lib/graalvm/graaljs-launcher.jar - GraalVM JS cmd line interpreter (optional)
???

$GRAALVM/jre/lib/graalvm/launcher-common.jar - common launcher code shared by all languages
???
https://search.maven.org/artifact/org.graalvm/launcher-common (but that's old...)
also https://docs.oracle.com/en/graalvm/enterprise/20/docs/reference-manual/js/RunOnJDK/

$GRAALVM/jre/lib/boot/graaljs-scriptengine.jar - ScriptEngine/JSR 223 support (optional)
https://repo.maven.apache.org/maven2/org/graalvm/js/js-scriptengine/20.3.0/js-scriptengine-20.3.0.jar

_ make it possible for the main class to be something besides the default name
_   want to use sketch.js (this is a fine restriction)
_   how difficult to have modes determine whether a sketch is a sketch?
_     so that the main sketch class doesn't have to follow a naming convention
_   Mode.rebuildSketchbookTree() handles creation of the sketchbook menu
_   which calls Base.addSketches() to do the actual adding
_   would need some means of specifying what the 'main' file is
_     at least with p5js we could provisionally just use sketch.js?
_ or need better solution when opening sketch.js files
_   just rename the sketch.js file itself
_   https://github.com/fathominfo/processing-p5js-mode/issues/14
_   This might be better handled by an “Import” tool that pulls
_   from a local folder or from the online editor.

_ if starting a new sketch, must reload the browser first?
_   what's happening here? concerned about code mods not updating
_   set no cache on returned objects?

_ when sketch is moved while the editor is open
_   it can't re-create any of the supporting files
_   leaving you with a broken sketch, which is messy b/c it looks ok

_ how to enable the cdn version?
_   would be nice to use by default, but don't net connection as requirement
_   or is there a way to handle it inside the p5js server?
_   just have a preference/checkbox in the menu
_     enabling the cdn will remove p5.min.js from the sketch
_     new sketches inherit the last setting

_ other import library changes
_   it's actually 'add library' not 'import' in this case
_   probably need a way to *remove* the libraries too
_   get contributed libraries working?

_ refactor library imports in p5
_   properly refactor rebuildLibraryList() and the isCompatible() code
_     which is currently only found in ExampleContribution, but should be
_     implemented in a more general way for the other contribs
_     clean up the static stuff since it's not just Examples
_   Library.discover(File) is static and expects .jar files
_     even once that's fixed, need to make sure js libs don't show up w/ Java
_     meaning that there needs to be other ironing in there

_ better means of understanding actual use of p5jsMode?
_   shows as installed on 30% of machines using the manager

_ mode option for showing html and css or not
_   might be nice to hide these for beginners who will never modify them
_   is it time to add Mode preferences?
_ other supported types from old/offline p5js editor
_   txt, html, css, js, json, scss, xml, csv, less
_   include: html, css, js, json, scss, less
_   exclude: xml, txt, csv (like to be in data folder)
_ add basic syntax highlighting for css


. . .

roll the version/revision numbers in mode.properties

# update the release in mode.properties (it'll match the rev number here)
git tag -a release-1.0 -m '1.0 final'
git tag -a v1.0.1 -m 'version 1.0.1'
git tag -a v1.0.2 -m 'version 1.0.2'
git tag -a v1.0.3 -m 'version 1.0.3'
git tag -a v1.0.4 -m 'version 1.0.4'
git tag -a v1.1 -m 'version 1.1'
git tag -a v1.1.1 -m 'version 1.1.1'
git tag -a v1.2 -m 'version 1.2'
git tag -a v1.2.1 -m 'version 1.2.1'
git tag -a v1.2.2 -m 'version 1.2.2'
git tag -a v1.3 -m 'version 1.3'
git tag -a v1.3.1 -m 'version 1.3.1'
git push origin --tags

# delete the previous 'latest'
git tag -d latest
git push origin :refs/tags/latest

# create new 'latest' tag with the current state of the repo
git tag -f -a latest -m 'version 1.3.1'
# actually update things
git push -f --tags

ant dist
then upload dist/p5jsMode.zip and dist/p5jsMode.txt to the 'latest' tag
(can also upload them to the v1.3 tag for anyone installing manually)
and name/put some info about the release into the tag
https://github.com/fathominfo/processing-p5js-mode/releases
